/*###############################################################
## MODULE: MSA_Convex.h
## VERSION: 1.0 
## SINCE 2015-09-03
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

/* Imported Libraries */
using namespace std;
#include "stdio.h"
#include "stdlib.h"
#include <limits>
#include <vector>
#include <sstream> 
#include <iostream>
#include <fstream>


/* Self-defined Constants and Global Variables */
const double MIN_DOUBLE = -1*numeric_limits<double>::max();
const double MAX_DOUBLE = numeric_limits<double>::max();
const int NUM_DNA_TYPE = 4; 
const int NUM_MOVEMENT = 9;

/* Data Structure */
enum Action {
    UNDEFINED, INSERTION,
    MATCH_A, MATCH_T, MATCH_C, MATCH_G,
    DELETION_A, DELETION_T, DELETION_C, DELETION_G
};
string action2str (Action action) {
    /*
    switch (action) {
        case INSERTION: return "Insertion";
        case DELETION: return "Deletion";
        case MATCH: return "Match";
        case MISMATCH: return "Mismatch";
        case UNDEFINED: return "Undefined";
    }
    */
}
class Cell {
    public:
        double score;   
        Action action;
        int dim;   
        vector<int> location; 
        char acidA, acidB;
        Cell (int dim) {
            this->score = 0;
            this->action = UNDEFINED;
            this->dim = dim;
            for (int i = 0; i < dim; i ++) 
                location.push_back(-1);
            this->acidA = '?';
            this->acidB = '?';
        }

        /* convert to string:
         *    [(location vector), action, acidA, acidB, score] */
        string toString () {
            stringstream s;
            s << "[(";
            for (int i = 0 ; i < this->dim; i ++) {
                s << location[i];
                if (i < this->dim - 1) s << ",";
            }
            cout << "), ";
            s << action2str(this->action) << ", ";
            s << this->acidA << ", " << this->acidB;
            s << ", " << this->score << ") ";
            return s.str();
        }
};

typedef vector<vector<char> > SequenceSet;
typedef vector<char> Sequence;

typedef vector<Cell> Trace;
typedef vector<Trace > Plane; // 2-d Cell Plane
typedef vector<Plane > Cube;  // 3-d Cell Cube

typedef vector<vector<double> > Matrix; // 2-d double matrix
typedef vector<Matrix > Tensor;  // 3-d double tensor
typedef vector<Tensor > Tensor4D; // 4-d double Tensor
typedef vector<Tensor4D > Tensor5D;  // 5-d double Tensor

/* Define match identification function */
bool isMatch1 (char DNA1, char DNA2) {
    if (DNA1 > DNA2) {
        char temp = DNA1;
        DNA1 = DNA2;
        DNA2 = temp;
    }
    if (DNA1 == 'A' and DNA2 == 'T' or DNA1 == 'C' and DNA2 == 'G') 
        return true;
    else return false;
}
bool isMatch2 (char DNA1, char DNA2) {
    return DNA1==DNA2;
}
